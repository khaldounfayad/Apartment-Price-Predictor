# -*- coding: utf-8 -*-
"""Visualized Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NCoL-6XIROgCfPBQhv75H7LhR0zWRQnL
"""

#loading in necessary toolboxes
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn import tree
from sklearn.inspection import permutation_importance
from sklearn.preprocessing import StandardScaler
from sklearn import linear_model
from sklearn.metrics import r2_score
from sklearn.pipeline import make_pipeline
from scipy.stats import skew
from sklearn.linear_model import LinearRegression, Ridge, LassoCV
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import SGDRegressor
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import log_loss, accuracy_score
from sklearn import linear_model
from sklearn.metrics import mean_absolute_error
from xgboost.sklearn import XGBRegressor
from sklearn.model_selection import RepeatedKFold
from numpy import absolute
#import graphviz
import xgboost as xgb
from google.colab import files

"""Loading data"""

#loading data, it is split into 3 files each corresponding to the month it was collected in
df_august = pd.read_csv('https://raw.githubusercontent.com/WitoldSurdej/PFML/master/apartments_pl_2023_08.csv')
df_september = pd.read_csv('https://raw.githubusercontent.com/WitoldSurdej/PFML/master/apartments_pl_2023_09.csv')
df_october = pd.read_csv('https://raw.githubusercontent.com/WitoldSurdej/PFML/master/apartments_pl_2023_10.csv')

#displaying data
df_august.head()

df_september.head()

df_october.head()

#showing the size of each dataset
print(df_august.shape)
print(df_september.shape)
print(df_october.shape)

"""Concatenating Data"""

#labeling the data from each dataset
df_august['Month'] = 0
df_september['Month'] = 1
df_october['Month'] = 2

#combining datasets into 1
frames = [df_august, df_september, df_october]
#creating a dataframe
df = pd.concat(frames)

"""Data processing"""

# Shape of dataframe
df.shape

# Checking for missing values
df.isna().sum()

#creating temporary data frame
df_temp=df
# Dropping id and columns which have a very high number of missing values, being impossible to apply techniques such as imputation
df.drop(['id','type', 'floor', 'buildYear', 'floorCount', 'condition', 'buildingMaterial'], axis=1, inplace=True)

"""Definition:
Data imputation is a process used in data analysis and preprocessing to fill in missing or incomplete data with estimated or substituted values. Missing data can be a common issue when dealing with real-world datasets, and imputation methods are used to handle these missing values effectively. Data imputation is essential because many statistical and machine learning algorithms may not work properly with missing data, and imputing values allows you to preserve as much information as possible.
"""

# Dropping rows which contain missing values
df_clean = df.dropna()

# Dropping duplicates if any
df_clean = df_clean.drop_duplicates().reset_index(drop=True)

#displaying cleared data
df_clean.head(5)

#showing data size after cleaning
df_clean.shape

"""Selecting Numerical and Categorical Columns"""

#dropping categorical data
cat_cols = df_clean.select_dtypes(['object']).columns
df_cats = df_clean[cat_cols].reset_index(drop=True)

#splitting data into train and test with proportions 70/30
X1 = df_clean.loc[:, df_clean.columns != 'price']
y1 = df_clean['price'].values

num_cols = X1.select_dtypes([np.number]).columns
df_nums = X1[num_cols].reset_index(drop=True)

"""Visualizing Data"""

features = num_cols.to_list()
plt.figure(figsize = (20, 10))
for i in range(0, len(features)):
    plt.subplot(5, 3, i+1)
    sns.histplot(x = X1[features[i]], kde = True, color = 'green')
    plt.tight_layout()

"""Splitting Data by city

Boxplot comparing different cities
"""

# Create a boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(x='city', y='price', data=df_clean)

# Improve the plot with labels and title
plt.xticks(rotation=45)
plt.xlabel('City')
plt.ylabel('Price')
plt.title('Price Distribution by City')

# Display the plot
plt.show()

mean_prices = df_clean.groupby('city')['price'].mean()

# convert to DataFrame for better formatting
mean_prices_df = mean_prices.reset_index()
mean_prices_df.columns = ['City', 'Average Price']
print(mean_prices_df)

# Bar plot of average prices
plt.figure(figsize=(12, 6))
sns.barplot(x='City', y='Average Price', data=mean_prices_df)

plt.xticks(rotation=45)
plt.xlabel('City')
plt.ylabel('Average Price')
plt.title('Average Price by City')

plt.show()

"""Checking POICoint, School Distance, and Pharmacy Distance Averages"""

#POI Count
POI_mean_prices = df_clean.groupby('city')['poiCount'].mean()

# convert to DataFrame for better formatting
POI_mean_prices_df = POI_mean_prices.reset_index()
POI_mean_prices_df.columns = ['City', 'Average POI Count']
print(POI_mean_prices_df)

# Bar plot of average prices
plt.figure(figsize=(12, 6))
sns.barplot(x='City', y='Average POI Count', data=POI_mean_prices_df)

plt.xticks(rotation=45)
plt.xlabel('City')
plt.ylabel('Average POI Count')
plt.title('Average POI Count by City')

plt.show()

#School distance
school_mean_prices = df_clean.groupby('city')['schoolDistance'].mean()

# convert to DataFrame for better formatting
school_mean_prices_df = school_mean_prices.reset_index()
school_mean_prices_df.columns = ['City', 'Average School Distance']
print(school_mean_prices_df)

# Bar plot of average prices
plt.figure(figsize=(12, 6))
sns.barplot(x='City', y='Average School Distance', data=school_mean_prices_df)

plt.xticks(rotation=45)
plt.xlabel('City')
plt.ylabel('Average School Distance')
plt.title('Average School Distancet by City')

plt.show()

#Pharmacy distance
pharm_mean_prices = df_clean.groupby('city')['pharmacyDistance'].mean()

# convert to DataFrame for better formatting
pharm_mean_prices_df = pharm_mean_prices.reset_index()
pharm_mean_prices_df.columns = ['City', 'Average Pharmacy Distance']
print(pharm_mean_prices_df)

# Bar plot of average prices
plt.figure(figsize=(12, 6))
sns.barplot(x='City', y='Average Pharmacy Distance', data=pharm_mean_prices_df)

plt.xticks(rotation=45)
plt.xlabel('City')
plt.ylabel('Average Pharmacy Distance')
plt.title('Average Pharmacy Distance by City')

plt.show()